[{"content":"Command Types As we saw above we have parent and exec types of commands. Users can add more but these are the core ones we support today.\nMost commands are made up of a generic set of options and then have one or more added in addition to specialise them.\nCommon properties reference Most commands include a standard set of fields - those that do not or have special restritions will mention in the docs.\nLets look at how we can produce this command:\nusage: demo say [\u003cflags\u003e] \u003cmessage\u003e Says something using the cowsay command The command called defaults to cowsay but can be configured using the Cowsay configuration item Flags: --help Show context-sensitive help (also try --help-long and --help-man). --cowfile=FILE Use a specific cow file Args: \u003cmessage\u003e The message to display It’s made up of a commands member that has these properties:\nname: example description: Example application version: 1.0.0 author: Opertions team \u003cops@example.net\u003e  commands:  -  # The name in the command: 'example say ....' (required)  name: say   # Help showng in output of 'example help say' or 'example say --help` (required)  description: |Says something using the cowsay command The command called defaults to cowsay but can be configured using the Cowsay configuration item   # Selects the kind of command, see below (required)  type: exec # or any other known type   # Optionally you can run 'example say hello' or 'example s hello' (optional)  aliases:  - s    # Arguments to accept (optional)  arguments:  - name: message  description: The message to display  required: true   # Flags to accept (optional)  flags:  - name: cowfile  description: Use a specific cow file  placeholder: FILE   # Sub commands to create below this one (optional, but see specific references)  commands: [] Since version 0.0.4 if a specifc flag or argument has a finite number of options, you can limit it using the enum option and we have a default option to complement it, here’s an example:\nflags:  - name: eyes  description: Control the eyes of the cow  enum: [\"*\", \"+\", \"x\", \"@\"]  default: \"+\" If any option other than those are supplied an error will be raised. If --eyes is not given it will default to +.\n","description":"","tags":null,"title":"Common Settings","uri":"/reference/common-settings/"},{"content":"Installation Over on our Releases page you will find binaries, rpms, debs, zip files and more holding the appbuilder command. There is just one command and you can place it anywhere in your path.\nWe publish OS X and Linux homebrew packages:\n$ brew tap choria-io/tap $ brew install choria-io/tap/appbuilder Hello World We will make a little command that invokes cowsay to demonstrate some of the capabilities of the system.\nWe want to be able to run this command and it should invoke cowsay, cowthink or if configured to do so use animalsay instead of cowsay\n$ demo say \"hello world\" $ demo think \"hello world\" First we have to write a YAML file that describes our demo application, we have reference sections in the wiki for all the options, so this being an introduction, will be short on details.\nname: demo description: Demo application for Choria App Builder author: https://github.com/choria-io/appbuilder commands: - name: say description: Say something using the configured command type: exec command: | {{ default .Config.Cowsay \"cowsay\" }} {{ .Arguments.message | escape }} arguments: - name: message description: The message to send to the terminal required: true - name: think description: Think something using a cow type: exec command: | cowthink {{ .Arguments.message | escape }} arguments: - name: message description: The message to send to the terminal required: true Place this file in either /etc/appbuilder/demo-app.yaml or ~/.config/appbuilder/demo-app.yaml.\n$ sudo mkdir -p /etc/appbuilder/demo-app.yaml $ sudo ln -s /usr/local/bin/appbuilder /usr/bin/demo $ demo say \"hello world\" _____________ \u003c hello world \u003e ------------- \\ ^__^ \\ (oo)\\_______ (__)\\ )\\/\\ ||----w | || || $ demo think \"this is pretty cool\" _____________________ ( this is pretty cool ) --------------------- o ^__^ o (oo)\\_______ (__)\\ )\\/\\ ||----w | || || Finally, if you read the YAML file, you may see we made the system configurable, lets look how that works.\nCreate the following in /etc/appbuilder/demo-cfg.yaml\nCowsay: animalsay Now when we invoke demo say it will use animalsay:\n$ demo say \"hello world\" _____________ \u003c hello world \u003e ------------- \\ ____________ \\ |__________| / /\\ / / \\ /___________/___/| | | | | ==\\ /== | | | O O | \\ \\ | | \u003c | \\ \\| /| | \\ \\ / | \\_____/ | / / / /| | / /| /||\\| | /||\\/ -------------| | | | | \u003c__/ \\__\u003e ","description":"","tags":null,"title":"Quick Start","uri":"/quick-start/"},{"content":"A parent is a placeholder, you can have a command like example deploy status and example deploy upgrade, here the deploy is a parent. It’s just there to group related commands and takes no action on it’s own.\nIt requires the the name, description, type and commands and the optional aliases.\nIt does not accept flags, arguments or confirm_prompt.\nname: deploy description: Manage deployment of the system type: parent  # Commands are required for the parent type and should have more than 1 commands: [] ","description":"","tags":null,"title":"Parent Command Type","uri":"/reference/parent/"},{"content":"Running commands An exec runs a command, it is identical to the generic example shown earlier and accepts flags, arguments and sub commands. The only difference is that it adds a command, environment (since 0.0.3) and transform (since 0.0.5) items.\nBelow the example that runs cowsay integrated with configuration:\nname: say description: Says something using the cowsay command type: exec  environment:  - \"MESSAGE={{ .Arguments.message}}\"  command: | {{ default .Config.Cowsay \"cowsay\" }} \"{{ .Arguments.message | escape }}\"  arguments:  - name: message  description: The message to display  required: true The command is how the shell command is specified and we show some templating. This will read the .Config hash for a value Cowsay if it does not exist it will default to \"cowsay\". We also see how we can reference the .Arguments to access the value supplied by the user, we escape it for shell safety.\nWe also show how to set environment variables using environment, this too will be templated. This was added in version 0.0.3.\nTransformation using JQ If you have a command that is known to emit JSON data you can ask appbuilder to transform that data using a dialect of JQ called GoJQ, the resulting data will be printed to STDOUT.\n Version Hint Added in version 0.0.5\n  name: ghd description: Gets the description of a Github Repo type: exec command: |curl -H \"Accept: application/vnd.github.v3+json\" https://api.github.com/repos/{{ .Arguments.owner }}/{{ .Arguments.repo }}  transform:  query: .description  arguments:  - name: owner  description: The repo owner  required: true   - name: repo  description: The repo name  require: true Here we fetch data from the GitHub API and use the internal JQ to transform it by extracting just the one item.\n$ demo ghd choria-io appbuilder Tool to create friendly wrapping command lines over operations tools ","description":"","tags":null,"title":"Exec Command Type","uri":"/reference/exec/"},{"content":"Reference Command Components The system primarily is there to execute a type of command somewhere in the hierarchy of a CLI tools sub commands.\nLets say we have an app called demo that has commands demo say and demo think the say and think bits are commands. In this example these are commands of type exec - they run a shell command.\nIf we had a command demo deploy status and demo deploy upgrade then generally the deploy would not perform any action, it’s there mainly to achor sub commands and show help information. Here the deploy command would be of type parent.\nGenerally I would suggest nested commands are structured as root -\u003e parent -\u003e parent -\u003e exec and never root -\u003e parent -\u003e exec -\u003e exec. If you do decide to do that I strongly suggest the first exec is a read only action like showing some status. User should feel safe to execute parents without unintended side effects.\nFlags and Arguments Often we need to pass some parameters to commands, for example if we have one to upgrade some software it might be demo upgrade 1.2.3. Here the 1.2.3 is an argument, you can have a number of arguments and they can be set to be required or optional. If you have multiple arguments an optional one can not be before a required one.\nFlags are generally kept for optional items like demo upgrade 1.2.3 --channel=nightly, here we pass a flag --channel. At present we only support flags with string values. We intend to support enums of valid values and boolean flags.\n","description":"","tags":null,"title":"Reference","uri":"/reference/"},{"content":"Templates allow you to interpolate values from Flags, Arguments and Configuration into some aspects of commands.\nFor example the exec command type allows you to use templates to put arguments into the command being run.\nWe use the Go template language at the moment, it’s not the best we might look at something else later.\nOnly some fields are parsed through templates, the documentation for each command type will call out what is supported.\nReference An example template use was shown in the exec documentation:\ncommand: | {{ default .Config.Cowsay \"cowsay\" }} \"{{ .Arguments.message | escape }}\" Here we have examples of accessing the .Config and .Arguments structures and using some functions.\nAvailable Data    Key Description     .Config Data stored in the configuration file for this application   .Arguments Data supplied by users using command arguments   .Flags Data supplied by users using command flags    Available Functions    Function Description Example     require Asserts that some data is available, errors with an optional custom message on failure `{{ .Config.Password \\   escape Escapes a string for use in shell arguments `{{ .Arguments.message \\   read_file Reads a file {{ read_file .Arguments.file }}   default Checks a value, if its not supplied uses a default {{ default .Config.Cowsay \"cowsay\" }}    ","description":"","tags":null,"title":"Templating","uri":"/reference/templating/"},{"content":"To support supplying items like passwords, tokens, custom applications or paths we support loading a per-application configuration file.\nThis file is stored in example-cfg.yaml in the standard file locations.\nIt’s any valid YAML file, for example:\n# /etc/appbuilder/demo-cfg.yaml Cowsay: animalsay This can then we used in templates. If a configuration item is required I suggest always using it with the require function:\ncommand: | slack-notify --token \"{{.Config.slack.token | require \"slack token not set\" }}\" ","description":"","tags":null,"title":"Configuration","uri":"/reference/configuration/"},{"content":"","description":"","tags":null,"title":"Categories","uri":"/categories/"},{"content":"The only configuration you should be concerned about is your Application Definition and optional Application Configuration.\nWe support the XDG Base specification, including standard environment variable based overrides like using XDG_CONFIG_HOME, for storing these in your home directory and have system wide fallback locations.\nFiles are stored in either ~/.config/appbuilder or /etc/appbuilder/.\n   File Description     demo-app.yaml This is your application definition   demo-cfg.yaml This is your per-application configuration    ","description":"","tags":null,"title":"File Locations","uri":"/reference/file-locations/"},{"content":"","description":"","tags":null,"title":"Tags","uri":"/tags/"}]
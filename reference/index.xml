<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Reference on Choria Application Builder Documentation</title><link>https://choria-io.github.io/appbuilder/reference/</link><description>Recent content in Reference on Choria Application Builder Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://choria-io.github.io/appbuilder/reference/index.xml" rel="self" type="application/rss+xml"/><item><title>Common Settings</title><link>https://choria-io.github.io/appbuilder/reference/common-settings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://choria-io.github.io/appbuilder/reference/common-settings/</guid><description>Command Types As we saw above we have parent and exec types of commands. Users can add more but these are the core ones we support today.
Most commands are made up of a generic set of options and then have one or more added in addition to specialise them.
Common properties reference Most commands include a standard set of fields - those that do not or have special restritions will mention in the docs.</description></item><item><title>Parent Command Type</title><link>https://choria-io.github.io/appbuilder/reference/parent/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://choria-io.github.io/appbuilder/reference/parent/</guid><description>A parent is a placeholder, you can have a command like example deploy status and example deploy upgrade, here the deploy is a parent. It&amp;rsquo;s just there to group related commands and takes no action on it&amp;rsquo;s own.
It requires the the name, description, type and commands and the optional aliases.
It does not accept flags, arguments or confirm_prompt.
name: deploy description: Manage deployment of the system type: parent # Commands are required for the parent type and should have more than 1 commands: []</description></item><item><title>Exec Command Type</title><link>https://choria-io.github.io/appbuilder/reference/exec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://choria-io.github.io/appbuilder/reference/exec/</guid><description>Running commands An exec runs a command, it is identical to the generic example shown earlier and accepts flags, arguments and sub commands. The only difference is that it adds a command, environment (since 0.0.3) and transform (since 0.0.5) items.
Below the example that runs cowsay integrated with configuration:
name: say description: Says something using the cowsay command type: exec environment: - &amp;#34;MESSAGE={{ .Arguments.message}}&amp;#34; command: | {{ default .</description></item><item><title>Templating</title><link>https://choria-io.github.io/appbuilder/reference/templating/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://choria-io.github.io/appbuilder/reference/templating/</guid><description>Templates allow you to interpolate values from Flags, Arguments and Configuration into some aspects of commands.
For example the exec command type allows you to use templates to put arguments into the command being run.
We use the Go template language at the moment, it&amp;rsquo;s not the best we might look at something else later.
Only some fields are parsed through templates, the documentation for each command type will call out what is supported.</description></item><item><title>Configuration</title><link>https://choria-io.github.io/appbuilder/reference/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://choria-io.github.io/appbuilder/reference/configuration/</guid><description>To support supplying items like passwords, tokens, custom applications or paths we support loading a per-application configuration file.
This file is stored in example-cfg.yaml in the standard file locations.
It&amp;rsquo;s any valid YAML file, for example:
# /etc/appbuilder/demo-cfg.yaml Cowsay: animalsay This can then we used in templates. If a configuration item is required I suggest always using it with the require function:
command: | slack-notify --token &amp;#34;{{.Config.slack.token | require &amp;#34;slack token not set&amp;#34; }}&amp;#34;</description></item><item><title>File Locations</title><link>https://choria-io.github.io/appbuilder/reference/file-locations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://choria-io.github.io/appbuilder/reference/file-locations/</guid><description>The only configuration you should be concerned about is your Application Definition and optional Application Configuration.
We support the XDG Base specification, including standard environment variable based overrides like using XDG_CONFIG_HOME, for storing these in your home directory and have system wide fallback locations.
Files are stored in either ~/.config/appbuilder or /etc/appbuilder/.
File Description demo-app.yaml This is your application definition demo-cfg.yaml This is your per-application configuration</description></item></channel></rss>